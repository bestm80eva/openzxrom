                                   OpenZXrom
                                   =========

        "No disrespect to Mr. Altwasser but it is the ROM, not the
        hardware, that make the Spectrum great. It's an incomplete work
        of genius."
                - Geoff Wearmouth, comp.sys.sinclair
                <8te+ZzDmVI1DFw7K@wearmouth.demon.co.uk>

OpenZXrom is a ROM image for the Sinclair ZX Spectrum computer, created with the
aim of being as compatible as possible with Sinclair's original 16/48K ROM while
containing none of the original copyrighted code. It is released under the GNU
General Public License.

* Why?

Amstrad, the current copyright holders of the Spectrum ROMs, have informally
given permission for the ROMs to be distributed for emulation purposes subject
to certain conditions, such as not charging a fee for distributing them. This
grant of permission has been welcomed by the Spectrum community, and has allowed
Spectrum emulation projects to flourish without legal shadows hanging over them.
However, Amstrad's permission stops short of being a full Open Source licence,
which has impacted on two areas of development in particular:-

1) Hardware re-implementations of the Spectrum are explicitly excluded from
   Amstrad's statement of permission;
2) Software collections such as the Debian project, which adhere to a strict
   Open Source only policy, are currently unable to include Spectrum emulators,
   as the ROM image is an integral part of any emulator.

For these reasons, and perhaps others yet to be identified, there is a clear
demand for a freely licenced ROM image that can serve in some capacity as a
substitute for the original Sinclair ROM.

* How compatible can we get?

Certainly not 100%... having a complete Basic programming environment is a long
way off. (True 100% compatibility will never be attainable anyway; the
pathological case would be a program which performs a byte checksum of the ROM.)
The current development centres around two goals:
1) Implementing the most common entry points used by machine-code programs;
   these include text printing, keyboard scanning and floating point maths.
2) Implementing enough of a Basic interpreter to run a typical bootstrap loader,
   to allow machine code programs to be loaded from tape.

For 1), we might expect something like a 90:10 rule, particularly for games: 90%
of games will work with only 10% of the ROM's feature set implemented. Often (as
in the case of Manic Miner) simply providing a font is enough. 2) is rather more
taxing, as even a short Basic stub may turn out to use all sorts of language
features. Nevertheless, the most common commands (CLEAR, LOAD, USR) are now
supported, and this is enough to get a small but growing number of titles
working correctly. See the STATUS document for the current list of supported
features.

Of course, the real Sinclair ROMs will continue to be readily downloadable under
Amstrad's not-free-but-usually-good-enough licence for the forseeable future, so
this will always be an option for troublesome programs, even for people who
receive their emulator without those ROMs bundled.

* Is this a clean-room implementation?

Not really. I (and doubtless anyone else likely to be working on this project)
have a fair bit of experience working with the original ROM routines, and access
to Logan & O'Hara's "The Complete Spectrum ROM Disassembly", which I've made
frequent use of on this project. I've generally concentrated on the commentary
though, only consulting the actual ROM code when absolutely necessary, and
certainly not in order to figure out the best way of doing things. I'd advise
any other contributors to take the same approach.

In practice, the differing design goals and priorities between this ROM and
Sinclair's will tend towards producing different code; for example, in our
version of the print routines, we have no need to implement such details as
stream redirection (at least, not yet).

* How do I use it?

This will vary from one emulator to another. In Fuse, you can go to Options ->
Select ROMs -> Spectrum 48K and select the file, or start it with the command
line:

fuse --rom-48 openzxrom.bin --machine 48

On a 128K machine, you'll get best results from placing the same ROM image in
both slots, so that it's always available regardless of the current paging:

fuse --rom-128-0 openzxrom.bin --rom-128-1 openzxrom.bin --machine 128

However, this is probably a case of "if you're the sort of person to be
interested in this project in the first place, you probably know how to do it
already". Once this project properly gets off the ground and is supplied as the
default ROM image for an emulator package, you're more likely to be asking how
to switch away from it instead :-)

* Build instructions

'make'.
You'll need Pasmo <http://www.arrakis.es/~ninsesabe/pasmo/> to assemble it -
tested with version 0.5.3, but earlier versions may work.

* Error messages

Some programs may stop with diagnostic error messages, indicated by a striped
red and yellow border. These are more likely to indicate missing features of
the ROM rather than errors in the running program:
"Here be dragons: 0xnnnn"
- The running program has made a call to an empty area of the ROM, at the
  address shown. Most likely, this is a call to a routine that hasn't been
  implemented yet.
"Unsupported BASIC command: 0xnn"
- The Basic interpreter has encountered an unimplemented Basic command. The
  hex code is the ASCII code of the offending keyword token.
"Unsupported function: 0xnn"
- As above, but for a function call within a Basic line.
"Syntax error at: 0xnnnn"
- An unexpected character was encountered while interpreting a Basic command.
  This may be a genuine syntax error, or a variant of a partly-implemented
  language feature which is not yet supported (e.g. the LOAD "" DATA form of
  LOAD ""). The address indicates the portion of ROM code which encountered the
  syntax error.
"Unprintable character: 0xnn"
- The text printing routine has encountered a character for which printing is
  not yet implemented; this currently includes keyword tokens and block
  graphics. The hex code is the ASCII code of the offending character.
"Unsupported calculator op: 0xnn"
- The floating point calculator routine (RST 0x0028) was invoked with an
  instruction code (indicated by the hex code) which is not yet implemented.


Matthew Westcott <matthew@west.co.tt>
http://matt.west.co.tt/spectrum/openzxrom/
